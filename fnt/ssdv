#!/usr/bin/gawk -E

# Autor: Ulpiano Tur de Vargas <ulpiano.tur.devargas@gmail.com>
#
# Este programa es software libre; puedes distribuirlo y/o
# modificarlo bajo los términos de la Licencia Pública General de GNU
# según la publicó la Fundación del Software Libre; ya sea la versión 3, o
# (a su elección) una versión superior.
#
# Este programa se distribuye con la esperanza de que sea útil,
# pero SIN NINGUNA GARANTIA; ni siquiera la garantía implícita de
# COMERCIABILIDAD o APTITUD PARA UN PROPÓSITO DETERMINADO. Vea la
# Licencia Pública General de GNU para más detalles.
#
# Deberías haber recibido una copia de la Licencia Pública General
# de GNU junto con este software; mira el fichero LICENSE. Si
# no, mira <https://www.gnu.org/licenses/>.

# Author: Ulpiano Tur de Vargas <ulpiano.tur.devargas@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this software; see the file LICENSE. If
# not, see <https://www.gnu.org/licenses/>.

@include "funcs_ssdv.awk";
@include "funcs_http.awk";

BEGIN {
    delete lcfg;
    lee_config("./ssdv.conf", lcfg);

    fichero = "";

    CRLF = RS = "\r\n";

    puerto = trae(lcfg, "general.puerto");
    tuboTcpIp = "/inet/tcp/" puerto "/0/0";

    HttpVersion   = "HTTP/1.1";

    # Bloquear ejecución (espera hasta que un cliente conecte)
    printf "" |& tuboTcpIp;

    for (;;) {
        tuboTcpIp |& getline;
        print systime(), strftime();
        print $3, $1, $2;
        
        liniHttp["metodo"] = $1;
        liniHttp["objeto"] = $2;
        liniHttp["vrsion"] = $3

        if (liniHttp["metodo"] != "GET") {
            HttpCodEstado = 405;
            HttpTxtEstado = "Método no permitido";
            fichero = "./html/405.html";
        }
        else if (liniHttp["objeto"] != "/") {
            HttpCodEstado = 404;
            HttpTxtEstado = "No Encontrado";
            fichero = "./html/404.html";

        } else {
            HttpCodEstado = 200;
            HttpTxtEstado = "Vale";
            fichero = ARGV[1];
        }

        printf "%s %s %s", HttpVersion, HttpCodEstado, HttpTxtEstado CRLF |& tuboTcpIp;
        printf "Server: El servidor simple de Vargas/1.0" CRLF            |& tuboTcpIp;
        printf "Content-Type: text/html;charset=UTF-8" CRLF               |& tuboTcpIp;

        envia = STD[HttpCodEstado]["funcion"];
        @envia(fichero, tuboTcpIp);

        # Ignorar cabeceras enviadas por el cliente
        while ((tuboTcpIp |& getline) > 0)
            ;

        close(tuboTcpIp);
    }
}