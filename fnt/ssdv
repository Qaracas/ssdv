#!/usr/bin/gawk -E

# Autor: Ulpiano Tur de Vargas <ulpiano.tur.devargas@gmail.com>
#
# Este programa es software libre; puedes distribuirlo y/o
# modificarlo bajo los términos de la Licencia Pública General de GNU
# según la publicó la Fundación del Software Libre; ya sea la versión 3, o
# (a su elección) una versión superior.
#
# Este programa se distribuye con la esperanza de que sea útil,
# pero SIN NINGUNA GARANTIA; ni siquiera la garantía implícita de
# COMERCIABILIDAD o APTITUD PARA UN PROPÓSITO DETERMINADO. Vea la
# Licencia Pública General de GNU para más detalles.
#
# Deberías haber recibido una copia de la Licencia Pública General
# de GNU junto con este software; mira el fichero LICENSE. Si
# no, mira <https://www.gnu.org/licenses/>.

# Author: Ulpiano Tur de Vargas <ulpiano.tur.devargas@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this software; see the file LICENSE. If
# not, see <https://www.gnu.org/licenses/>.

@include "funcs_ssdv.awk";
@include "funcs_http.awk";

BEGIN {
    # Esbozo de lo que se quiere. Lista indexada de ficheros de cada dominio.
    LSTDM["www.dominio.com"]["/html/ejemplo.html"] = 0;

    Opterr = 0;
    Optind = 1;
    while ((c = getopt(ARGC, ARGV, "c:")) != -1) {
        switch (c) {
        case "c":
            opcn["ruta_conf"] = Optarg;
            break;
        case "?":
        default:
            usar();
            break;
        }
    }

    delete lcfg;
    lee_config(opcn["ruta_conf"], lcfg);

    fichero = "";

    CRLF = RS = "\r\n";

    puerto = trae(lcfg, "general.puerto");
    canalTcpIP = "/inet/tcp/" puerto "/0/0";

    HttpVersion   = "HTTP/1.1";

    for (;;) {
        # Leer línea de inicio y cabeceras de la petición
        i = 0;
        while ((canalTcpIP |& getline) > 0) {
            if (i++ < 1) {
                lnInicioHttp["metodo"]   = $1;
                lnInicioHttp["objetivo"] = $2;
                lnInicioHttp["version"]  = $3;
            } else {
                if (! gsub(/:/, "", $1))
                    break;
                cabeceraHttp[$1] = $2;
            }
        }

        printf "* %s\n* %s\n", strftime(), cabeceraHttp["User-Agent"];
        print "<", lnInicioHttp["version"], lnInicioHttp["metodo"], lnInicioHttp["objetivo"];

        if (lnInicioHttp["metodo"] != "GET") {
            HttpCodEstado = 405;
            HttpTxtEstado = "Método no permitido";
            fichero = "./html/405.html";
        }
        else if (! (lnInicioHttp["objetivo"] in LSTDM["www.dominio.com"])) {
            HttpCodEstado = 404;
            HttpTxtEstado = "No Encontrado";
            fichero = "./html/404.html";

        } else {
            HttpCodEstado = 200;
            HttpTxtEstado = "Vale";
            fichero = "." lnInicioHttp["objetivo"];
        }

        print ">", HttpVersion, HttpCodEstado, HttpTxtEstado;

        printf "%s %s %s", HttpVersion, HttpCodEstado, HttpTxtEstado CRLF |& canalTcpIP;
        printf "Server: El servidor simple de Vargas/1.0" CRLF            |& canalTcpIP;
        printf "Content-Type: text/html;charset=UTF-8" CRLF               |& canalTcpIP;

        envia = STD[HttpCodEstado]["funcion"];
        @envia(fichero, canalTcpIP);

        close(canalTcpIP);
    }
}