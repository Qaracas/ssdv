#!/usr/bin/gawk -E

# Autor: Ulpiano Tur de Vargas <ulpiano.tur.devargas@gmail.com>
#
# Este programa es software libre; puedes distribuirlo y/o
# modificarlo bajo los términos de la Licencia Pública General de GNU
# según la publicó la Fundación del Software Libre; ya sea la versión 3, o
# (a su elección) una versión superior.
#
# Este programa se distribuye con la esperanza de que sea útil,
# pero SIN NINGUNA GARANTIA; ni siquiera la garantía implícita de
# COMERCIABILIDAD o APTITUD PARA UN PROPÓSITO DETERMINADO. Vea la
# Licencia Pública General de GNU para más detalles.
#
# Deberías haber recibido una copia de la Licencia Pública General
# de GNU junto con este software; mira el fichero LICENSE. Si
# no, mira <https://www.gnu.org/licenses/>.

# Author: Ulpiano Tur de Vargas <ulpiano.tur.devargas@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this software; see the file LICENSE. If
# not, see <https://www.gnu.org/licenses/>.

@include "funcs_ssdv.awk";
@include "funcs_http.awk";

@load "fork"

BEGIN {
    Opterr = 0;
    Optind = 1;
    ProcesaOpciones_ssdv(ARGC, ARGV);

    delete lcfg;
    LeeConfiguracion_ssdv(Opcn["ruta_conf"], lcfg);

    i = 0;
    while ((dom = trae(lcfg, "dominio.[" ++i "].nombre")) != "") {
        rut = trae(lcfg, "dominio.[" i "].ruta_contenido");
        Indexar_contenido_ssdv(dom, rut);
        LSTDR[dom] = rut;
    }

    Inicia_http();

    for (i = 0; i < 3; i++)
        p[i] = Crea_proceso();

    wait();
}

function Crea_proceso(pid)
{
    if ((pid = fork()) == 0)
        Un_proceso();

    return pid;
}

function Un_proceso(canalTcpIP)
{
    canalTcpIP = "/inet/tcp/" trae(lcfg, "general.puerto") "/0/0";
    for (;;) {
        print "Esperando", PROCINFO["pid"];
        # Genera LineaIniPetHttp, CabeceraPetHttp
        PROCINFO[canalTcpIP, "RETRY"];
        PROCINFO[Service, "READ_TIMEOUT"] = 100;
        EsperaPeticion_http(canalTcpIP);

        # Genera LineaEstResHttp
        ProcesaPeticion_http(LineaIniPetHttp, CabeceraPetHttp);

        if (LineaEstResHttp["codigo"] == 400) {
            print LineaEstResHttp["texto"], ". Ignorar...";
            system("sleep 10");
            fflush(canalTcpIP);
            #close(canalTcpIP);
            continue;
        }

        system("sleep 10");

        # Genera CabeceraResHttp
        EnviaRespuesta_http(LineaEstResHttp, canalTcpIP);

        close(canalTcpIP);
    }
}
